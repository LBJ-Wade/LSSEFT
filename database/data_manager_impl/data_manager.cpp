//
// Created by David Seery on 11/08/2015.
// --@@ // Copyright (c) 2017 University of Sussex. All rights reserved.
//
// This file is part of the Sussex Effective Field Theory for
// Large-Scale Structure platform (LSSEFT).
//
// LSSEFT is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
//
// LSSEFT is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with LSSEFT.  If not, see <http://www.gnu.org/licenses/>.
//
// @license: GPL-2
// @contributor: David Seery <D.Seery@sussex.ac.uk>
// --@@
//


#include <iostream>
#include <sstream>
#include <assert.h>

#include <set>
#include <unordered_set>

#include "database/data_manager.h"
#include "database/data_manager_impl/types.h"

#include "sqlite3_detail/utilities.h"
#include "sqlite3_detail/operations.h"

#include "utilities/formatter.h"

#include "defaults.h"

#include "boost/timer/timer.hpp"


#include "autogenerated/pipeline_id.cpp"


void report_attach(error_handler& e, const boost::filesystem::path& ctr)
  {
    std::ostringstream msg;
    
    msg << DATABASE_ATTACHED << " '";
    if(ctr.has_leaf())
      {
        msg << ctr.leaf().string();
      }
    else
      {
        msg << ctr.string();
      }
    msg << "'";

    e.announce(msg.str());
  }


data_manager::data_manager(const boost::filesystem::path& c, error_handler& e, const argument_cache& ac)
  : container(c),
    err_handler(e),
    handle(nullptr),   // try to catch handle-not-initialized errors
    arg_cache(ac),
    policy(),
    FRW_model_tol(LSSEFT_DEFAULT_FRW_MODEL_PARAMETER_TOLERANCE),
    z_tol(LSSEFT_DEFAULT_REDSHIFT_CONFIGURATION_TOLERANCE),
    k_tol(LSSEFT_DEFAULT_WAVENUMBER_CONFIGURATION_TOLERANCE),
    filter_tol(LSSEFT_DEFAULT_FILTER_CONFIGURATION_TOLERANCE),
    oneloop_tol(LSSEFT_DEFAULT_ONELOOP_CONFIGURATION_TOLERANCE),
    MatsubaraXY_tol(LSSEFT_DEFAULT_MATSUBARAXY_CONFIGURATION_TOLERANCE),
    growth_tol(LSSEFT_DEFAULT_GROWTH_CONFIGURATION_TOLERANCE)
  {
    // check whether container already exists
    if(boost::filesystem::exists(container))
      {
        if(boost::filesystem::is_regular_file(container))
          {
            if(sqlite3_open_v2(container.string().c_str(), &handle, SQLITE_OPEN_READWRITE, nullptr) != SQLITE_OK)
              {
                std::ostringstream msg;
                msg << ERROR_DATABASE_SQLITE_OPEN_FAILED << " " << container;
                throw runtime_exception(exception_type::database_error, msg.str());
              }

            // validate that pipeline id expected by database matches our own id
            // if not, due to the way GiNaC works, the kernel numbers generated by LSSEFT-analytic
            // are unlikely to agree between database and toolchain
            auto db_id = sqlite3_operations::read_pipeline_id(handle, policy);
            if(db_id != pipeline_id())
              {
                std::ostringstream msg;
                msg << ERROR_DATABASE_WRONG_PIPELINE_ID_A << " '" << db_id << "' "
                    << ERROR_DATABASE_WRONG_PIPELINE_ID_B << " '" << pipeline_id() << "'";
                throw runtime_exception(exception_type::database_error, msg.str());
              }

            report_attach(this->err_handler, container);
            return;
          }
        else
          {
            std::ostringstream msg;
            msg << ERROR_DATABASE_IS_NOT_FILE_A << " " << container << " " << ERROR_DATABASE_IS_NOT_FILE_B;
            throw runtime_exception(exception_type::database_error, msg.str());
          }
      }

    // if we get to here, the container does not already exist so we should create it
    if(sqlite3_open_v2(container.string().c_str(), &handle, SQLITE_OPEN_CREATE | SQLITE_OPEN_READWRITE, nullptr) != SQLITE_OK)
      {
        std::ostringstream msg;
        msg << ERROR_DATABASE_SQLITE_CREATE_FAILED << " " << container;
        throw runtime_exception(exception_type::database_error, msg.str());
      }

    // set up tables
    sqlite3_operations::create_tables(handle, policy);

    // write pipeline id
    sqlite3_operations::write_pipeline_id(handle, policy, pipeline_id());
    
    report_attach(this->err_handler, container);
  }


data_manager::~data_manager()
  {
    assert(this->handle != nullptr);

    // perform routine maintenance on container and tidy up
    sqlite3_operations::tidy(this->handle);

    sqlite3_close(this->handle);
  }
