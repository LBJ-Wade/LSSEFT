//
// Created by David Seery on 14/11/2016.
// --@@ // Copyright (c) 2017 University of Sussex. All rights reserved.
//
// This file is part of the Sussex Effective Field Theory for
// Large-Scale Structure platform (LSSEFT).
//
// LSSEFT is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
//
// LSSEFT is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with LSSEFT.  If not, see <http://www.gnu.org/licenses/>.
//
// @license: GPL-2
// @contributor: David Seery <D.Seery@sussex.ac.uk>
// --@@
//

#include "oneloop_Pk_calculator.h"


#include "autogenerated/Pk_expressions.cpp"


std::list<oneloop_Pk_set>
oneloop_Pk_calculator::calculate_Pk(const Mpc_units::energy& k, const k_token& k_tok, const oneloop_growth& gf_factors,
                                    const loop_integral& loop_data, const initial_filtered_Pk& Pk_init,
                                    const boost::optional<const final_filtered_Pk&>& Pk_final)
  {
    std::list<oneloop_Pk_set> container;
    
    // use spline to evaluate initial and final linear power spectra at scale k
    Pk_value Ptr_init = build_Pk_value(k, Pk_init);
    
    boost::optional<linear_Pk_token> final_tok;
    if(Pk_final) final_tok = Pk_final->get_token();
    
    boost::optional<Pk_value> Ptr_final;
    if(Pk_final) Ptr_final = build_Pk_value(k, *Pk_final);

    for(const oneloop_value& val : gf_factors)
      {
        // create blank entry at end of container
        container.emplace_back();

        oneloop_Pk_set& Pks = container.back();

#include "autogenerated/compute_Pk_stmts.cpp"

      }
    
    return container;
  }
